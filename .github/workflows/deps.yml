name: Update Dependencies
on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering
env:
  GO_VERSION: '1.21'
jobs:
  update-go-deps:
    name: Update Go Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Update Go dependencies
        run: |
          # Update all dependencies to their latest versions
          go get -u ./...
          go mod tidy

          # Check if there are any changes
          if git diff --quiet go.mod go.sum; then
            echo "No Go dependency updates available"
            echo "GO_DEPS_UPDATED=false" >> $GITHUB_ENV
          else
            echo "Go dependencies updated"
            echo "GO_DEPS_UPDATED=true" >> $GITHUB_ENV
          fi
      - name: Run tests with updated dependencies
        if: env.GO_DEPS_UPDATED == 'true'
        run: |
          go test ./...
      - name: Create Go dependencies PR
        if: env.GO_DEPS_UPDATED == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Go dependencies"
          title: "Update Go dependencies"
          body: |
            ðŸ¤– **Automated PR**: Update Go dependencies to latest versions

            ## Changes
            This PR updates Go module dependencies to their latest compatible versions.

            ## Testing
            - âœ… All tests pass with updated dependencies

            ## Review Notes
            - Check the dependency changes in `go.mod` and `go.sum`
            - Verify that no breaking changes were introduced
            - Consider running additional integration tests

            This PR was automatically created by the dependency update workflow.
          branch: update-go-deps
          delete-branch: true
          labels: |
            dependencies
            automated
            go
  update-nix-deps:
    name: Update Nix Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock', 'go.sum') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never
      - name: Update Nix flake inputs
        run: |
          # Update flake inputs
          nix flake update

          # Check if there are any changes
          if git diff --quiet flake.lock; then
            echo "No Nix dependency updates available"
            echo "NIX_DEPS_UPDATED=false" >> $GITHUB_ENV
          else
            echo "Nix dependencies updated"
            echo "NIX_DEPS_UPDATED=true" >> $GITHUB_ENV
          fi
      - name: Test build with updated dependencies
        if: env.NIX_DEPS_UPDATED == 'true'
        run: |
          nix build .#default
          ./result/bin/ctx --help
      - name: Create Nix dependencies PR
        if: env.NIX_DEPS_UPDATED == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Nix flake inputs"
          title: "Update Nix flake inputs"
          body: |
            ðŸ¤– **Automated PR**: Update Nix flake inputs to latest versions

            ## Changes
            This PR updates the Nix flake inputs (nixpkgs, flake-utils, etc.) to their latest versions.

            ## Testing
            - âœ… Nix package builds successfully
            - âœ… Binary works correctly

            ## Review Notes
            - Check the changes in `flake.lock`
            - Verify that the development shell still works: `nix develop`
            - Test that the package builds: `nix build .#default`

            This PR was automatically created by the dependency update workflow.
          branch: update-nix-deps
          delete-branch: true
          labels: |
            dependencies
            automated
            nix
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run Go security audit
        run: |
          # Install govulncheck
          go install golang.org/x/vuln/cmd/govulncheck@latest

          # Run vulnerability check
          govulncheck ./...
      - name: Run Nancy (dependency vulnerability scanner)
        uses: sonatypecommunity/nancy-github-action@main
        with:
          nancyCommand: sleuth
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

