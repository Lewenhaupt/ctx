name: Release
on:
  push:
    tags:
      - 'v*.*.*'
env:
  GO_VERSION: '1.21'
permissions:
  contents: write
  packages: write
jobs:
  build-release:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          EXT=""
          if [ "$GOOS" = "windows" ]; then
            EXT=".exe"
          fi

          BINARY_NAME="ctx-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}${EXT}"

          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o "dist/${BINARY_NAME}" ./cmd/ctx

          # Create archive
          cd dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${BINARY_NAME%.exe}.zip" "${BINARY_NAME}"
          else
            tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
          fi
      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ctx-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "First release of ctx - markdown fragment splicing tool" >> changelog.md
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  update-flake:
    name: Update Nix Flake
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
            /nix/var/nix/profiles
            /nix/var/nix/gcroots
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock', 'go.sum') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NO_V=${VERSION#v}" >> $GITHUB_OUTPUT
      - name: Update flake.nix version and get new vendorHash
        run: "VERSION=\"${{ steps.version.outputs.VERSION_NO_V }}\"\n\n# Update version in flake.nix\nsed -i \"s/version = \\\".*\\\"/version = \\\"$VERSION\\\"/\" flake.nix\n\n# Try to build to get the correct vendorHash\necho \"Building to determine vendorHash...\"\nset +e\nBUILD_OUTPUT=$(nix build .#default 2>&1)\nBUILD_EXIT_CODE=$?\nset -e\n\nif [ $BUILD_EXIT_CODE -ne 0 ]; then\n  # Extract the expected hash from the error message\n  NEW_HASH=$(echo \"$BUILD_OUTPUT\" | grep -o \"got:.*sha256-[A-Za-z0-9+/=]*\" | sed 's/got:[[:space:]]*//')\n  \n  if [ -n \"$NEW_HASH\" ]; then\n    echo \"Updating vendorHash to: $NEW_HASH\"\n    sed -i \"s/vendorHash = \\\".*\\\"/vendorHash = \\\"$NEW_HASH\\\"/\" flake.nix\n    \n    # Try building again to verify\n    echo \"Verifying build with new vendorHash...\"\n    nix build .#default\n  else\n    echo \"Could not extract vendorHash from build output\"\n    echo \"Build output:\"\n    echo \"$BUILD_OUTPUT\"\n    exit 1\n  fi\nelse\n  echo \"Build succeeded, no vendorHash update needed\"\nfi\n"
      - name: Test updated flake
        run: |
          # Verify the package builds and works
          nix build .#default
          ./result/bin/ctx --help
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update flake.nix for release ${{ steps.version.outputs.VERSION }}"
          title: "Update flake.nix for release ${{ steps.version.outputs.VERSION }}"
          body: |
            ðŸ¤– **Automated PR**: Update flake.nix after release ${{ steps.version.outputs.VERSION }}

            ## Changes
            - Updated version to `${{ steps.version.outputs.VERSION_NO_V }}`
            - Updated vendorHash (if changed)

            ## Verification
            - âœ… Nix package builds successfully
            - âœ… Binary works correctly

            This PR was automatically created after the release workflow completed.

            **Note**: This PR can be safely merged if CI passes.
          branch: update-flake-${{ steps.version.outputs.VERSION }}
          delete-branch: true
          labels: |
            automated
            release
          reviewers: |
            # Add your GitHub username here if you want to be auto-assigned
          assignees: |
            # Add your GitHub username here if you want to be auto-assigned
  notify-release:
    name: Notify Release
    needs: [create-release, update-flake]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Release Summary
        run: |-
          echo "## ðŸš€ Release ${{ steps.version.outputs.VERSION }} Complete!"
          echo ""
          echo "### âœ… Completed:"
          echo "- Built binaries for multiple platforms"
          echo "- Created GitHub release with assets"
          echo "- Created PR to update flake.nix"
          echo ""
          echo "### ðŸ“¦ Available Downloads:"
          echo "- GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }}"
          echo "- Nix: \`nix run github:${{ github.repository }}/${{ steps.version.outputs.VERSION }}\`"
          echo ""
          echo "### ðŸ”„ Next Steps:"
          echo "- Review and merge the flake.nix update PR"
          echo "- Announce the release"

