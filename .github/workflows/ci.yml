name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run integration tests
      env:
        XDG_CONFIG_HOME: ${{ github.workspace }}/test-config
      run: |
        mkdir -p $XDG_CONFIG_HOME/.ctx/fragments
        go test -v -tags=integration ./...

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.21'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Go vet
      run: go vet ./...

  nix-build:
    name: Nix Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Cache Nix store
      uses: cachix/cachix-action@v15
      with:
        name: ctx-cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: ${{ github.event_name == 'pull_request' }}

    - name: Check flake
      run: nix flake check

    - name: Build package
      run: nix build .#default

    - name: Test built binary
      run: |
        ./result/bin/ctx --help
        ./result/bin/ctx build --help

    - name: Check flake.lock is up to date
      run: |
        nix flake update --commit-lock-file || true
        if ! git diff --quiet flake.lock; then
          echo "flake.lock is not up to date. Please run 'nix flake update' and commit the changes."
          git diff flake.lock
          exit 1
        fi

  build-cross-platform:
    name: Build Cross Platform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        EXT=""
        if [ "$GOOS" = "windows" ]; then
          EXT=".exe"
        fi
        go build -o dist/ctx-${{ matrix.goos }}-${{ matrix.goarch }}${EXT} ./cmd/ctx

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ctx-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/